"""test client

Revision ID: 3bf1d7a884f2
Revises: 81ca7867d61a
Create Date: 2023-10-14 19:29:45.454815

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3bf1d7a884f2'
down_revision: Union[str, None] = '81ca7867d61a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_tour_guide_id', table_name='tour_guide')
    op.drop_constraint('review_guide_tour_guide_id_fkey', 'review_guide', type_='foreignkey')
    op.drop_table('tour_guide')
    op.drop_index('ix_client_preference_id', table_name='client_preference')
    op.drop_table('client_preference')
    op.drop_index('ix_review_guide_id', table_name='review_guide')
    op.drop_table('review_guide')
    op.drop_index('ix_feedback_id', table_name='feedback')
    op.drop_table('feedback')
    op.alter_column('address', 'lat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('address', 'lng',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('address', 'administrative_area_level_1',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'locality',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'place_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('address', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('user_type', sa.String(), nullable=False))
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'user_type')
    op.drop_column('users', 'is_active')
    op.alter_column('address', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('address', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('address', 'place_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('address', 'locality',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'administrative_area_level_1',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('address', 'lng',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('address', 'lat',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.create_table('feedback',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('review', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='feedback_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='feedback_pkey')
    )
    op.create_index('ix_feedback_id', 'feedback', ['id'], unique=False)
    op.create_table('review_guide',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('review', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qualification', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tour_guide_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='review_guide_client_id_fkey'),
    sa.ForeignKeyConstraint(['tour_guide_id'], ['tour_guide.id'], name='review_guide_tour_guide_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='review_guide_pkey')
    )
    op.create_index('ix_review_guide_id', 'review_guide', ['id'], unique=False)
    op.create_table('client_preference',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('activity_category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='client_preference_client_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='client_preference_pkey')
    )
    op.create_index('ix_client_preference_id', 'client_preference', ['id'], unique=False)
    op.create_table('tour_guide',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('qualification', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='tour_guide_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tour_guide_pkey')
    )
    op.create_index('ix_tour_guide_id', 'tour_guide', ['id'], unique=False)
    # ### end Alembic commands ###
